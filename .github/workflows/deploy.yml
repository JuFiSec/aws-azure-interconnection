name: Deploy AWS-Azure Interconnection

on:
  workflow_dispatch:
    inputs:
      action:
        description: 'Action à effectuer'
        required: true
        default: 'plan'
        type: choice
        options:
          - plan
          - apply
          - destroy
      environment:
        description: 'Environnement de déploiement'
        required: true
        default: 'dev'
        type: choice
        options:
          - dev
          - staging
          - prod

env:
  TF_VERSION: '1.5.0'
  AWS_REGION: 'eu-west-3'
  AZURE_REGION: 'West Europe'

jobs:
  terraform:
    name: 'Terraform ${{ github.event.inputs.action }}'
    runs-on: ubuntu-latest
    environment: ${{ github.event.inputs.environment }}
    
    defaults:
      run:
        shell: bash
        working-directory: ./terraform
    
    steps:
    - name: Checkout Repository
      uses: actions/checkout@v4
    
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: ${{ env.TF_VERSION }}
    
    - name: Configure AWS Credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}
    
    - name: Azure Login
      uses: azure/login@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}
    
    - name: Terraform Init
      run: |
        terraform init \
          -backend-config="bucket=${{ secrets.TF_STATE_BUCKET }}" \
          -backend-config="key=aws-azure-interconnection/${{ github.event.inputs.environment }}/terraform.tfstate" \
          -backend-config="region=${{ env.AWS_REGION }}"
    
    - name: Terraform Validate
      run: terraform validate
    
    - name: Terraform Format Check
      run: terraform fmt -check
    
    - name: Terraform Plan
      run: |
        terraform plan \
          -var="project_name=tp-aws-azure-${{ github.event.inputs.environment }}" \
          -var="aws_region=${{ env.AWS_REGION }}" \
          -var="azure_region=${{ env.AZURE_REGION }}" \
          -out=tfplan
    
    - name: Terraform Apply
      if: github.event.inputs.action == 'apply'
      run: terraform apply -auto-approve tfplan
    
    - name: Terraform Destroy
      if: github.event.inputs.action == 'destroy'
      run: |
        terraform destroy -auto-approve \
          -var="project_name=tp-aws-azure-${{ github.event.inputs.environment }}" \
          -var="aws_region=${{ env.AWS_REGION }}" \
          -var="azure_region=${{ env.AZURE_REGION }}"
    
    - name: Save Terraform Outputs
      if: github.event.inputs.action == 'apply'
      run: |
        terraform output -json > ../outputs.json
        echo "## Terraform Outputs" >> $GITHUB_STEP_SUMMARY
        echo "\`\`\`json" >> $GITHUB_STEP_SUMMARY
        cat ../outputs.json >> $GITHUB_STEP_SUMMARY
        echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
    
    - name: Upload Terraform Plan
      if: github.event.inputs.action == 'plan'
      uses: actions/upload-artifact@v3
      with:
        name: terraform-plan-${{ github.event.inputs.environment }}
        path: terraform/tfplan
        retention-days: 30
    
    - name: Upload Configuration Files
      if: github.event.inputs.action == 'apply'
      uses: actions/upload-artifact@v3
      with:
        name: deployment-config-${{ github.event.inputs.environment }}
        path: |
          terraform/deployment_config.env
          outputs.json
        retention-days: 30

  test-connectivity:
    name: 'Test Connectivity'
    runs-on: ubuntu-latest
    needs: terraform
    if: github.event.inputs.action == 'apply'
    
    steps:
    - name: Checkout Repository
      uses: actions/checkout@v4
    
    - name: Download Configuration
      uses: actions/download-artifact@v3
      with:
        name: deployment-config-${{ github.event.inputs.environment }}
    
    - name: Install SQL Server Tools
      run: |
        curl https://packages.microsoft.com/keys/microsoft.asc | sudo apt-key add -
        curl https://packages.microsoft.com/config/ubuntu/20.04/prod.list | sudo tee /etc/apt/sources.list.d/msprod.list
        sudo apt-get update
        sudo ACCEPT_EULA=Y apt-get install -y mssql-tools unixodbc-dev
    
    - name: Test Connectivity
      run: |
        chmod +x ./scripts/test_connectivity.sh
        ./scripts/test_connectivity.sh deployment_config.env
    
    - name: Upload Test Report
      uses: actions/upload-artifact@v3
      with:
        name: connectivity-report-${{ github.event.inputs.environment }}
        path: connectivity_report_*.txt
        retention-days: 30

  security-scan:
    name: 'Security Scan'
    runs-on: ubuntu-latest
    if: github.event.inputs.action == 'plan' || github.event.inputs.action == 'apply'
    
    steps:
    - name: Checkout Repository
      uses: actions/checkout@v4
    
    - name: Run Checkov
      uses: bridgecrewio/checkov-action@master
      with:
        directory: terraform/
        framework: terraform
        output_format: json
        download_external_modules: true
    
    - name: Run TFSec
      uses: aquasecurity/tfsec-action@v1.0.0
      with:
        working_directory: terraform/
    
    - name: Upload Security Scan Results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: security-scan-results-${{ github.event.inputs.environment }}
        path: |
          checkov_report.json
          tfsec_report.json
        retention-days: 30

  documentation:
    name: 'Update Documentation'
    runs-on: ubuntu-latest
    needs: terraform
    if: github.event.inputs.action == 'apply'
    
    steps:
    - name: Checkout Repository
      uses: actions/checkout@v4
    
    - name: Download Configuration
      uses: actions/download-artifact@v3
      with:
        name: deployment-config-${{ github.event.inputs.environment }}
    
    - name: Generate Documentation
      run: |
        # Mise à jour du README avec les informations de déploiement
        echo "## Dernière Mise à Jour" >> README_TEMP.md
        echo "" >> README_TEMP.md
        echo "**Date:** $(date)" >> README_TEMP.md
        echo "**Environnement:** ${{ github.event.inputs.environment }}" >> README_TEMP.md
        echo "**Version:** ${{ github.sha }}" >> README_TEMP.md
        echo "" >> README_TEMP.md
        
        # Ajouter les sorties Terraform si disponibles
        if [ -f outputs.json ]; then
          echo "## Configuration Actuelle" >> README_TEMP.md
          echo "" >> README_TEMP.md
          echo "\`\`\`json" >> README_TEMP.md
          cat outputs.json >> README_TEMP.md
          echo "\`\`\`" >> README_TEMP.md
        fi
        
        # Combiner avec le README existant
        cat README.md README_TEMP.md > README_UPDATED.md
        mv README_UPDATED.md README.md
    
    - name: Commit Documentation Updates
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        git add README.md
        git diff --staged --quiet || git commit -m "Mise à jour documentation automatique [skip ci]"
        git push